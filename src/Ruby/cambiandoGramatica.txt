programa → main { lista-declaración lista-sentencias }
*Programa -> main { lista-declaración lista-sentencia }  

lista-declaración → declaración ; lista-declaración | vació
*lista-declaración -> { declaración ; }

declaración → tipo lista-variables
*declaración -> tipo lista-variables

tipo → integer | float | bool
*tipo -> int | real | boolean                              |

lista-variables → identificador, lista-variables | identificador
*lista-variables -> id [ , id ]

lista-sentencias → sentencia lista-sentencias | sentencia | vació
sentencia → selección | iteración | repetición | sent-read |sent-write | bloque | asignación
*lista-sentencia -> { sentencia }
*sentencia -> sent-if | sent-while | sent-repeat | sent-cin | sent-cout | sentencia | asignación

selección → if ( expresión ) then bloque | if ( expresión ) then bloque else bloque
*sent-if -> if ( expresión ) then bloque [ else bloque ]   
iteración → while ( expresión ) bloque
*sent-while -> while ( expresión ) bloque                  
repetición → do bloque until ( expresión ) ;
*sent-repeat -> repeat bloque until ( expresión ) ;        

sent-read → read identificador ;
*sent-cin -> cin identificador ;

sent-write → write cadena, expression;|write cadena ;
*sent-cout -> cout expresión ;

bloque → { lista-sentencia }
*bloque -> { lista-sentencia }

asignación → identificador := expresión ;
*asignación -> identificador := expresión ;

expresión → expresión-simple relación expresión-simple | expresión-simple
*expresión -> exp [ relación exp ]

relacion → <= | < | > | >= | == | !=
*relación -> <= | < | > | >= | == | !=

expresión-simple → expresión-simple suma-op termino | termino
*exp -> term { opsuma term }

suma-op → + | - | ++ |--
*opsuma -> + | -

termino → termino mult-op factor | factor
*termino -> factor { opmult factor }

mult-op → * | / | %
*opmult -> * | /

factor → ( expresión ) | numero | identificador
*factor -> ( expresión ) | numero | identificador

